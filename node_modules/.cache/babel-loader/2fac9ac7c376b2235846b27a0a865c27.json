{"ast":null,"code":"import _slicedToArray from\"C:\\\\Users\\\\BENEDICTO EDUARDO\\\\PycharmProjects\\\\geo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import React from'react';import{Grid,Card,CardContent,Typography,CircularProgress,TableContainer,Table,TableRow,TableCell,TableHead,TableBody,Button,IconButton,Paper,TextField}from'@material-ui/core';import EditIcon from'@material-ui/icons/Edit';import{connect,useSelector}from'react-redux';import Objetos from'../../../components/Objetos';import{getAllMetadadoSelectedCabecalho,getMetadadoSelectedLoading}from'../../../store/selectors/metadados';import{Container,CardHeader}from'./styles';function Atualizacao(_ref){var metadadoSelectedCabecalho=_ref.metadadoSelectedCabecalho,isLoadingMetadadoSelected=_ref.isLoadingMetadadoSelected;var metadadoSelected=useSelector(function(state){return state.metadadoSelected;});var attrKeys=['A - Identificador Interno (mta_identificador)','B - Nome Interno do Atributo na Tabela (mta_atributo)','C - Sequência do Atributo na Tabela (mta_sequencia)','D - Descrição (mta_descricao)','E - Tipo do Campo (mta_tipo)','F - Obrigatoriedade (mta_obrigatoriedade)','G - Regra de Validação (mta_regravalidacao)','H - Observação (mta_observacao)','I - Identificador Interno do Metadado de Tabela (mtt_identificador)','J - Possibilidade de Edição (mta_editavel)'];return/*#__PURE__*/React.createElement(Container,null,/*#__PURE__*/React.createElement(Grid,{container:true,spacing:1},/*#__PURE__*/React.createElement(Grid,{item:true,xs:6},/*#__PURE__*/React.createElement(Paper,null,/*#__PURE__*/React.createElement(Card,null,/*#__PURE__*/React.createElement(CardHeader,{title:\"Objetos\"}),/*#__PURE__*/React.createElement(CardContent,null,/*#__PURE__*/React.createElement(Objetos,null))))),/*#__PURE__*/React.createElement(Grid,{item:true,xs:6},/*#__PURE__*/React.createElement(Card,null,/*#__PURE__*/React.createElement(CardHeader,{title:\"\\xC1rea de Edi\\xE7\\xE3o\"}),/*#__PURE__*/React.createElement(CardContent,null))),/*#__PURE__*/React.createElement(Grid,{item:true,xs:6},/*#__PURE__*/React.createElement(Card,null,/*#__PURE__*/React.createElement(CardHeader,{title:'Metadados do Objeto '+metadadoSelected.mttTabela}),/*#__PURE__*/React.createElement(CardContent,null,/*#__PURE__*/React.createElement(\"div\",{style:{float:'right'}},/*#__PURE__*/React.createElement(Button,{variant:\"contained\"},\"Atualizar metadados\")),isLoadingMetadadoSelected?/*#__PURE__*/React.createElement(CircularProgress,null):metadadoSelectedCabecalho.map(function(currElement){return Object.entries(currElement).map(function(_ref2){var _ref3=_slicedToArray(_ref2,2),key=_ref3[0],val=_ref3[1];return/*#__PURE__*/React.createElement(Typography,{variant:\"body2\",gutterBottom:true,key:key},/*#__PURE__*/React.createElement(\"strong\",null,key.split(' - ')[1],\": \"),val);});}))))),/*#__PURE__*/React.createElement(Grid,{container:true,spacing:1},/*#__PURE__*/React.createElement(Grid,{item:true,xs:6},/*#__PURE__*/React.createElement(Card,null,/*#__PURE__*/React.createElement(CardHeader,{title:\"Atributos do Objeto\"}),/*#__PURE__*/React.createElement(CardContent,null,/*#__PURE__*/React.createElement(TableContainer,null,/*#__PURE__*/React.createElement(Table,null,/*#__PURE__*/React.createElement(TableHead,null,/*#__PURE__*/React.createElement(TableRow,null,attrKeys.map(function(key){return/*#__PURE__*/React.createElement(TableCell,{key:key},key.split(' - ')[1]);}),/*#__PURE__*/React.createElement(TableCell,null,\"A\\xE7\\xF5es\"))),/*#__PURE__*/React.createElement(TableBody,null,metadadoSelected.campos.map(function(attr,index){return/*#__PURE__*/React.createElement(TableRow,{hover:true,key:index},attrKeys.map(function(key){return/*#__PURE__*/React.createElement(TableCell,{key:key},attr[key]||'null');}),/*#__PURE__*/React.createElement(TableCell,null,/*#__PURE__*/React.createElement(IconButton,{color:\"primary\",component:\"span\"},/*#__PURE__*/React.createElement(EditIcon,null))));})))))))));}var mapStateToProps=function mapStateToProps(state){return{isLoadingMetadadoSelected:getMetadadoSelectedLoading(state),metadadoSelectedCabecalho:getAllMetadadoSelectedCabecalho(state)};};var mapDispatchToProps=function mapDispatchToProps(){return{// startLoadingMetadados: () => dispatch(loadMetadadosTotal()),\n};};export default connect(mapStateToProps,mapDispatchToProps)(Atualizacao);","map":{"version":3,"sources":["C:/Users/BENEDICTO EDUARDO/PycharmProjects/geo/src/pages/Metadados/Atualizacao/index.js"],"names":["React","Grid","Card","CardContent","Typography","CircularProgress","TableContainer","Table","TableRow","TableCell","TableHead","TableBody","Button","IconButton","Paper","TextField","EditIcon","connect","useSelector","Objetos","getAllMetadadoSelectedCabecalho","getMetadadoSelectedLoading","Container","CardHeader","Atualizacao","metadadoSelectedCabecalho","isLoadingMetadadoSelected","metadadoSelected","state","attrKeys","mttTabela","float","map","currElement","Object","entries","key","val","split","campos","attr","index","mapStateToProps","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React from 'react'\n\nimport {\n  Grid,\n  Card,\n  CardContent,\n  Typography,\n  CircularProgress,\n  TableContainer,\n  Table,\n  TableRow,\n  TableCell,\n  TableHead,\n  TableBody,\n  Button,\n  IconButton,\n  Paper,\n  TextField,\n} from '@material-ui/core'\nimport EditIcon from '@material-ui/icons/Edit'\nimport PropTypes from 'prop-types'\nimport { connect, useSelector } from 'react-redux'\n\nimport Objetos from '../../../components/Objetos'\nimport {\n  getAllMetadadoSelectedCabecalho,\n  getMetadadoSelectedLoading,\n} from '../../../store/selectors/metadados'\nimport { Container, CardHeader } from './styles'\n\nfunction Atualizacao({ metadadoSelectedCabecalho, isLoadingMetadadoSelected }) {\n  const metadadoSelected = useSelector((state) => state.metadadoSelected)\n\n  const attrKeys = [\n    'A - Identificador Interno (mta_identificador)',\n    'B - Nome Interno do Atributo na Tabela (mta_atributo)',\n    'C - Sequência do Atributo na Tabela (mta_sequencia)',\n    'D - Descrição (mta_descricao)',\n    'E - Tipo do Campo (mta_tipo)',\n    'F - Obrigatoriedade (mta_obrigatoriedade)',\n    'G - Regra de Validação (mta_regravalidacao)',\n    'H - Observação (mta_observacao)',\n    'I - Identificador Interno do Metadado de Tabela (mtt_identificador)',\n    'J - Possibilidade de Edição (mta_editavel)',\n  ]\n\n  return (\n    <Container>\n      <Grid container spacing={1}>\n        <Grid item xs={6}>\n          <Paper>\n            <Card>\n              <CardHeader title='Objetos' />\n              <CardContent>\n                <Objetos />\n              </CardContent>\n            </Card>\n          </Paper>\n        </Grid>\n        <Grid item xs={6}>\n          <Card>\n            <CardHeader title='Área de Edição' />\n            <CardContent>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item xs={6}>\n          <Card>\n            <CardHeader\n              title={'Metadados do Objeto ' + metadadoSelected.mttTabela}\n            />\n            <CardContent>\n              <div style={{ float: 'right' }}>\n                <Button variant='contained'>Atualizar metadados</Button>\n              </div>\n              {isLoadingMetadadoSelected ? (\n                <CircularProgress />\n              ) : (\n                metadadoSelectedCabecalho.map((currElement) =>\n                  Object.entries(currElement).map(([key, val]) => (\n                    <Typography variant='body2' gutterBottom key={key}>\n                      <strong>{key.split(' - ')[1]}: </strong>\n                      {val}\n                    </Typography>\n                  ))\n                )\n              )}\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n      <Grid container spacing={1}>\n        <Grid item xs={6}>\n          <Card>\n            <CardHeader title='Atributos do Objeto' />\n            <CardContent>\n              <TableContainer>\n                <Table>\n                  <TableHead>\n                    <TableRow>\n                      {attrKeys.map((key) => (\n                        <TableCell key={key}>{key.split(' - ')[1]}</TableCell>\n                      ))}\n                      <TableCell>Ações</TableCell>\n                    </TableRow>\n                  </TableHead>\n                  <TableBody>\n                    {metadadoSelected.campos.map((attr, index) => (\n                      <TableRow hover key={index}>\n                        {attrKeys.map((key) => (\n                          <TableCell key={key}>{attr[key] || 'null'}</TableCell>\n                        ))}\n                        <TableCell>\n                          <IconButton color='primary' component='span'>\n                            <EditIcon />\n                          </IconButton>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </TableContainer>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n    </Container>\n  )\n}\n\nconst mapStateToProps = (state) => ({\n  isLoadingMetadadoSelected: getMetadadoSelectedLoading(state),\n  metadadoSelectedCabecalho: getAllMetadadoSelectedCabecalho(state),\n})\n\nconst mapDispatchToProps = () => ({\n  // startLoadingMetadados: () => dispatch(loadMetadadosTotal()),\n})\n\nAtualizacao.propTypes = {\n  metadadoSelectedCabecalho: PropTypes.array,\n  isLoadingMetadadoSelected: PropTypes.bool,\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Atualizacao)\n"]},"metadata":{},"sourceType":"module"}
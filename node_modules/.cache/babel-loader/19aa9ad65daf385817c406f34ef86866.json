{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\BENEDICTO EDUARDO\\\\PycharmProjects\\\\geo\\\\src\\\\pages\\\\ObjetosTabulares\\\\Atualizacao\\\\index.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Grid, Card, CardContent, CircularProgress } from '@material-ui/core';\nimport { getAllMetadadoSelectedEditaveis } from '../../../store/selectors/metadados';\nimport CustomTable from '../../../components/Table';\nimport CustomDialog from '../../../components/Dialog';\nimport * as Service from '../../../services/metadados.v2';\nimport Objetos from './Objetos';\nimport { Container, CardHeader } from './styles';\nimport { removeMetadado, setMessage, updateMetadado, MTT_METADADOTABELA, MTA_METADADOATRIBUTO } from '../../../services/metadados';\nimport { connect } from 'react-redux';\n\nfunction ObjetosTabulares({\n  onRemovePressed,\n  onUpdatePressed,\n  onSetMessagePressed,\n  metadadoSelectedEditaveis\n}) {\n  var _objeto$cabecalho;\n\n  const INITIAL_STATE = {\n    name: '',\n    mtt_descricao: '',\n    mtt_tabela: '',\n    mensagem: {\n      open: false,\n      texto: '',\n      tipo: 'success',\n      data: null,\n      campos: [],\n      labelButton: null,\n      dialogTitle: null,\n      message: null,\n      action: null,\n      openToast: false,\n      tipoToast: 'success',\n      textoToast: null,\n      editData: false\n    }\n  };\n  const [state, setState] = useState(INITIAL_STATE);\n  const [objeto, setObjeto] = useState({});\n  const [objetos, setObjetos] = useState([]);\n  const [loading, setLoading] = useState(false);\n  useEffect(() => {\n    async function fetchObjetos() {\n      setLoading(true);\n      const response = await Service.fetchObjetosTotal('convencional');\n      setObjetos(response.cabecalho);\n      setLoading(false);\n    }\n\n    fetchObjetos();\n  }, []);\n\n  const handleChange = async event => {\n    const {\n      name,\n      value\n    } = event.target;\n    setLoading(true);\n    const response = await Service.fetchObjetoTabelaExtenso(value);\n    const mtt_tabela = response.cabecalho[0]['B - Nome da Tabela (mtt_tabela)'];\n    const mtt_descricao = response.cabecalho[0]['C - Descrição (mtt_descricao)'];\n    setObjeto({ ...response,\n      mtt_tabela,\n      mtt_descricao\n    });\n    setLoading(false);\n  };\n\n  const update = (dado, fields, isMttTabela = false) => {\n    const mensagem = {\n      open: true,\n      tipo: 'success',\n      labelButton: 'Atualizar',\n      dialogTitle: 'Atualizar atributo',\n      data: dado.length > 0 ? dado[0] : dado,\n      campos: fields,\n      editData: true,\n\n      action(id, dadoAlteracao) {\n        setState({ ...state,\n          mensagem: {\n            openToast: false,\n            open: false\n          }\n        });\n        const dataToUpdate = isMttTabela ? { ...dadoAlteracao,\n          tabela: MTT_METADADOTABELA,\n          mtt_identificador: id\n        } : { ...dadoAlteracao,\n          tabela: MTA_METADADOATRIBUTO,\n          mta_identificador: id\n        };\n        onSetMessagePressed({\n          open: false,\n          text: null,\n          tipo: 'success',\n          loading: true\n        });\n        onUpdatePressed(id, dataToUpdate);\n      }\n\n    };\n    setState({ ...state,\n      mensagem\n    });\n  };\n\n  const updateTabela = (dado, fields) => {\n    update(dado, fields, true);\n  };\n\n  const createPropertyObject = (currElement, entryPreference) => {\n    return Object.entries(currElement).map(([key, values]) => {\n      return entryPreference === 'key' ? {\n        titulo: `${key.split(' - ')[1]}`,\n        dado: `${key}`\n      } : {\n        [key]: `${values}`\n      };\n    });\n  };\n\n  const createKeyAndValueObjects = (metadadoMap = [], entryPreference) => {\n    let elementsKey = [];\n    let elementsParse = null;\n    const elements = metadadoMap.map(currElement => {\n      return elementsKey = createPropertyObject(currElement, entryPreference);\n    });\n\n    if (entryPreference !== 'key') {\n      const elementsStringify = JSON.stringify(elements).replaceAll('[[[{', '[{').replaceAll('}]]]', '}]').replaceAll('}]],[[{', '},{').replaceAll('[[{', '[{').replaceAll('}]]', '}]').replaceAll('}],[{', '},{');\n      elementsParse = JSON.parse(elementsStringify);\n      elementsParse = onGeneratedData(elementsParse);\n    } else {\n      elementsParse = elementsKey;\n    }\n\n    return elementsParse;\n  };\n\n  function onGeneratedData(elementsParse) {\n    let jsonData = {};\n    const tempData = [];\n\n    for (const [key, value] of Object.entries(elementsParse)) {\n      if (JSON.stringify(value).includes('A - ')) jsonData = {};\n\n      for (const [keyValue, valueValue] of Object.entries(value)) {\n        jsonData[keyValue] = valueValue;\n        if (keyValue.includes('A - ')) tempData.push(jsonData);\n      }\n    }\n\n    return tempData;\n  }\n\n  const metadadoSelectedCabecalho = (_objeto$cabecalho = objeto.cabecalho) !== null && _objeto$cabecalho !== void 0 ? _objeto$cabecalho : [];\n  const metadadoSelectedCampos = objeto.campos;\n\n  const info = (dado, fields) => {\n    const mensagem = {\n      open: true,\n      tipo: 'success',\n      data: dado,\n      campos: fields,\n      editData: false\n    };\n    setState({ ...state,\n      mensagem\n    });\n  };\n\n  const handleDelete = async (dado, field) => {\n    const confirm = window.confirm('Por favor, confirme a exclusão');\n\n    if (confirm) {\n      await onRemovePressed(objeto.mtt_tabela, dado[Object.keys(dado)[0]]);\n      alert('Exclusão realizada com sucesso.');\n    }\n  };\n\n  const customFilterCampos = ['Nome Interno do Atributo na Tabela (mta_atributo)', 'Descrição (mta_descricao)', 'Tipo da Tabela (mta_tipo)'];\n  const customFilterDados = ['B - Nome Interno do Atributo na Tabela (mta_atributo)', 'D - Descrição (mta_descricao)', 'E - Tipo da Tabela (mta_tipo)'];\n  return /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(CustomDialog, {\n    open: state.mensagem.open,\n    mensagem: state.mensagem,\n    data: state.mensagem.data,\n    campos: state.mensagem.campos,\n    labelButton: state.mensagem.labelButton,\n    dialogTitle: state.mensagem.dialogTitle,\n    message: state.mensagem.message,\n    action: state.mensagem.action,\n    editData: state.mensagem.editData,\n    editaveis: metadadoSelectedEditaveis,\n    handleClose: () => setState({ ...state,\n      mensagem: {\n        open: false\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(CardHeader, {\n    title: \"Objetos\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(CardContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Objetos, {\n    value: objeto,\n    data: objetos,\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 15\n    }\n  }))))), /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 9\n    }\n  }, loading ? /*#__PURE__*/React.createElement(CircularProgress, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 13\n    }\n  }) : /*#__PURE__*/React.createElement(Card, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(CardHeader, {\n    title: \"Conte\\xFAdo do objeto\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(CardContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(CustomTable, {\n    dados: createKeyAndValueObjects(metadadoSelectedCampos, 'values'),\n    campos: createKeyAndValueObjects(metadadoSelectedCampos, 'key'),\n    updateDados: update,\n    excluirDados: handleDelete,\n    contentMaxHeight: 350,\n    customFilterCampos: customFilterCampos,\n    customFilterDados: customFilterDados,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 17\n    }\n  }))))));\n}\n\nconst mapStateToProps = state => ({\n  metadadoSelectedEditaveis: getAllMetadadoSelectedEditaveis(state)\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onRemovePressed: (mttTababela, id) => dispatch(removeMetadado(mttTababela, id)),\n  onUpdatePressed: (id, json) => dispatch(updateMetadado(id, json)),\n  onSetMessagePressed: message => dispatch(setMessage(message))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ObjetosTabulares);","map":{"version":3,"sources":["C:/Users/BENEDICTO EDUARDO/PycharmProjects/geo/src/pages/ObjetosTabulares/Atualizacao/index.js"],"names":["React","useState","useEffect","Grid","Card","CardContent","CircularProgress","getAllMetadadoSelectedEditaveis","CustomTable","CustomDialog","Service","Objetos","Container","CardHeader","removeMetadado","setMessage","updateMetadado","MTT_METADADOTABELA","MTA_METADADOATRIBUTO","connect","ObjetosTabulares","onRemovePressed","onUpdatePressed","onSetMessagePressed","metadadoSelectedEditaveis","INITIAL_STATE","name","mtt_descricao","mtt_tabela","mensagem","open","texto","tipo","data","campos","labelButton","dialogTitle","message","action","openToast","tipoToast","textoToast","editData","state","setState","objeto","setObjeto","objetos","setObjetos","loading","setLoading","fetchObjetos","response","fetchObjetosTotal","cabecalho","handleChange","event","value","target","fetchObjetoTabelaExtenso","update","dado","fields","isMttTabela","length","id","dadoAlteracao","dataToUpdate","tabela","mtt_identificador","mta_identificador","text","updateTabela","createPropertyObject","currElement","entryPreference","Object","entries","map","key","values","titulo","split","createKeyAndValueObjects","metadadoMap","elementsKey","elementsParse","elements","elementsStringify","JSON","stringify","replaceAll","parse","onGeneratedData","jsonData","tempData","includes","keyValue","valueValue","push","metadadoSelectedCabecalho","metadadoSelectedCampos","info","handleDelete","field","confirm","window","keys","alert","customFilterCampos","customFilterDados","mapStateToProps","mapDispatchToProps","dispatch","mttTababela","json"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\n\nimport { Grid, Card, CardContent, CircularProgress } from '@material-ui/core'\n\nimport { getAllMetadadoSelectedEditaveis } from '../../../store/selectors/metadados'\n\nimport CustomTable from '../../../components/Table'\nimport CustomDialog from '../../../components/Dialog'\nimport * as Service from '../../../services/metadados.v2'\nimport Objetos from './Objetos'\nimport { Container, CardHeader } from './styles'\n\nimport {\n  removeMetadado,\n  setMessage,\n  updateMetadado,\n  MTT_METADADOTABELA,\n  MTA_METADADOATRIBUTO,\n} from '../../../services/metadados'\nimport { connect } from 'react-redux'\n\nfunction ObjetosTabulares({\n  onRemovePressed,\n  onUpdatePressed,\n  onSetMessagePressed,\n  metadadoSelectedEditaveis,\n}) {\n  const INITIAL_STATE = {\n    name: '',\n    mtt_descricao: '',\n    mtt_tabela: '',\n    mensagem: {\n      open: false,\n      texto: '',\n      tipo: 'success',\n      data: null,\n      campos: [],\n      labelButton: null,\n      dialogTitle: null,\n      message: null,\n      action: null,\n      openToast: false,\n      tipoToast: 'success',\n      textoToast: null,\n      editData: false,\n    },\n  }\n\n  const [state, setState] = useState(INITIAL_STATE)\n  const [objeto, setObjeto] = useState({})\n  const [objetos, setObjetos] = useState([])\n  const [loading, setLoading] = useState(false)\n\n  useEffect(() => {\n    async function fetchObjetos() {\n      setLoading(true)\n      const response = await Service.fetchObjetosTotal('convencional')\n      setObjetos(response.cabecalho)\n      setLoading(false)\n    }\n\n    fetchObjetos()\n  }, [])\n\n  const handleChange = async (event) => {\n    const { name, value } = event.target\n\n    setLoading(true)\n    const response = await Service.fetchObjetoTabelaExtenso(value)\n\n    const mtt_tabela = response.cabecalho[0]['B - Nome da Tabela (mtt_tabela)']\n    const mtt_descricao = response.cabecalho[0]['C - Descrição (mtt_descricao)']\n\n    setObjeto({ ...response, mtt_tabela, mtt_descricao })\n    setLoading(false)\n  }\n\n  const update = (dado, fields, isMttTabela = false) => {\n    const mensagem = {\n      open: true,\n      tipo: 'success',\n      labelButton: 'Atualizar',\n      dialogTitle: 'Atualizar atributo',\n      data: dado.length > 0 ? dado[0] : dado,\n      campos: fields,\n      editData: true,\n      action(id, dadoAlteracao) {\n        setState({ ...state, mensagem: { openToast: false, open: false } })\n        const dataToUpdate = isMttTabela\n          ? {\n              ...dadoAlteracao,\n              tabela: MTT_METADADOTABELA,\n              mtt_identificador: id,\n            }\n          : {\n              ...dadoAlteracao,\n              tabela: MTA_METADADOATRIBUTO,\n              mta_identificador: id,\n            }\n\n        onSetMessagePressed({\n          open: false,\n          text: null,\n          tipo: 'success',\n          loading: true,\n        })\n        onUpdatePressed(id, dataToUpdate)\n      },\n    }\n    setState({ ...state, mensagem })\n  }\n\n  const updateTabela = (dado, fields) => {\n    update(dado, fields, true)\n  }\n\n  const createPropertyObject = (currElement, entryPreference) => {\n    return Object.entries(currElement).map(([key, values]) => {\n      return entryPreference === 'key'\n        ? {\n            titulo: `${key.split(' - ')[1]}`,\n            dado: `${key}`,\n          }\n        : {\n            [key]: `${values}`,\n          }\n    })\n  }\n\n  const createKeyAndValueObjects = (metadadoMap = [], entryPreference) => {\n    let elementsKey = []\n    let elementsParse = null\n    const elements = metadadoMap.map((currElement) => {\n      return (elementsKey = createPropertyObject(currElement, entryPreference))\n    })\n\n    if (entryPreference !== 'key') {\n      const elementsStringify = JSON.stringify(elements)\n        .replaceAll('[[[{', '[{')\n        .replaceAll('}]]]', '}]')\n        .replaceAll('}]],[[{', '},{')\n        .replaceAll('[[{', '[{')\n        .replaceAll('}]]', '}]')\n        .replaceAll('}],[{', '},{')\n      elementsParse = JSON.parse(elementsStringify)\n      elementsParse = onGeneratedData(elementsParse)\n    } else {\n      elementsParse = elementsKey\n    }\n\n    return elementsParse\n  }\n\n  function onGeneratedData(elementsParse) {\n    let jsonData = {}\n    const tempData = []\n    for (const [key, value] of Object.entries(elementsParse)) {\n      if (JSON.stringify(value).includes('A - ')) jsonData = {}\n      for (const [keyValue, valueValue] of Object.entries(value)) {\n        jsonData[keyValue] = valueValue\n        if (keyValue.includes('A - ')) tempData.push(jsonData)\n      }\n    }\n    return tempData\n  }\n\n  const metadadoSelectedCabecalho = objeto.cabecalho ?? []\n  const metadadoSelectedCampos = objeto.campos\n\n  const info = (dado, fields) => {\n    const mensagem = {\n      open: true,\n      tipo: 'success',\n      data: dado,\n      campos: fields,\n      editData: false,\n    }\n    setState({ ...state, mensagem })\n  }\n\n  const handleDelete = async (dado, field) => {\n    const confirm = window.confirm('Por favor, confirme a exclusão')\n\n    if (confirm) {\n      await onRemovePressed(objeto.mtt_tabela, dado[Object.keys(dado)[0]])\n      alert('Exclusão realizada com sucesso.')\n    }\n  }\n\n  const customFilterCampos = [\n    'Nome Interno do Atributo na Tabela (mta_atributo)',\n    'Descrição (mta_descricao)',\n    'Tipo da Tabela (mta_tipo)',\n  ]\n\n  const customFilterDados = [\n    'B - Nome Interno do Atributo na Tabela (mta_atributo)',\n    'D - Descrição (mta_descricao)',\n    'E - Tipo da Tabela (mta_tipo)',\n  ]\n\n  return (\n    <Container>\n      <CustomDialog\n        open={state.mensagem.open}\n        mensagem={state.mensagem}\n        data={state.mensagem.data}\n        campos={state.mensagem.campos}\n        labelButton={state.mensagem.labelButton}\n        dialogTitle={state.mensagem.dialogTitle}\n        message={state.mensagem.message}\n        action={state.mensagem.action}\n        editData={state.mensagem.editData}\n        editaveis={metadadoSelectedEditaveis}\n        handleClose={() => setState({ ...state, mensagem: { open: false } })}\n      />\n\n      <Grid container spacing={2}>\n        <Grid item xs={6}>\n          <Card>\n            <CardHeader title='Objetos' />\n            <CardContent>\n              <Objetos value={objeto} data={objetos} onChange={handleChange} />\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n      <Grid container spacing={2}>\n        <Grid item xs={12}>\n          {loading ? (\n            <CircularProgress />\n          ) : (\n            <Card>\n              <CardHeader title='Conteúdo do objeto' />\n              <CardContent>\n                <CustomTable\n                  dados={createKeyAndValueObjects(\n                    metadadoSelectedCampos,\n                    'values'\n                  )}\n                  campos={createKeyAndValueObjects(\n                    metadadoSelectedCampos,\n                    'key'\n                  )}\n                  updateDados={update}\n                  excluirDados={handleDelete}\n                  contentMaxHeight={350}\n                  customFilterCampos={customFilterCampos}\n                  customFilterDados={customFilterDados}\n                />\n              </CardContent>\n            </Card>\n          )}\n        </Grid>\n      </Grid>\n    </Container>\n  )\n}\n\nconst mapStateToProps = (state) => ({\n  metadadoSelectedEditaveis: getAllMetadadoSelectedEditaveis(state),\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n  onRemovePressed: (mttTababela, id) =>\n    dispatch(removeMetadado(mttTababela, id)),\n  onUpdatePressed: (id, json) => dispatch(updateMetadado(id, json)),\n  onSetMessagePressed: (message) => dispatch(setMessage(message)),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ObjetosTabulares)\n"]},"metadata":{},"sourceType":"module"}
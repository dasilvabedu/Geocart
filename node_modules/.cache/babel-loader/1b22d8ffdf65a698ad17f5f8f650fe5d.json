{"ast":null,"code":"import { LOAD_METADADOS_FAILURE, LOAD_METADADOS_IN_PROGRESS, LOAD_METADADOS_SUCCESS, LOAD_METADADO_SELECTED_FAILURE, LOAD_METADADO_SELECTED_IN_PROGRESS, LOAD_METADADO_SELECTED_SUCCESS, LOAD_METADADO_SELECTED_SUCCESS_EDITAVEIS, REMOVE_METADADO_SELECTED, SET_METADADO_SELECTED_MESSAGE, UPDATE_METADADO_SELECTED } from '../actions/metadados';\nimport { MTT_METADADOTABELA } from '../../services/metadados';\nconst initialState = {\n  isLoading: false,\n  data: []\n};\nexport const metadados = (state = initialState, action) => {\n  const {\n    type,\n    payload\n  } = action;\n\n  switch (type) {\n    case LOAD_METADADOS_SUCCESS:\n      {\n        const {\n          metadados\n        } = payload;\n        return { ...state,\n          isLoading: false,\n          data: metadados\n        };\n      }\n\n    case LOAD_METADADOS_IN_PROGRESS:\n      {\n        return { ...state,\n          isLoading: true\n        };\n      }\n\n    case LOAD_METADADOS_FAILURE:\n      {\n        return { ...state,\n          isLoading: false\n        };\n      }\n\n    default:\n      return state;\n  }\n};\nconst initialStateSelected = {\n  isLoading: false,\n  data: [],\n  cabecalho: [],\n  campos: [],\n  dados: [],\n  editaveis: [],\n  camposTabelaEditaveis: [],\n  mttTabela: null,\n  message: {\n    open: false,\n    text: null,\n    tipo: 'success',\n    loading: false\n  }\n};\nexport const metadadoSelected = (state = initialStateSelected, action) => {\n  const {\n    type,\n    payload\n  } = action;\n\n  switch (type) {\n    case LOAD_METADADO_SELECTED_SUCCESS:\n      {\n        const {\n          mttTabela,\n          metadados\n        } = payload;\n        return { ...state,\n          isLoading: false,\n          data: metadados,\n          cabecalho: metadados.cabecalho,\n          campos: metadados.campos,\n          dados: metadados.dados,\n          mttTabela,\n          message: {\n            open: false,\n            text: null,\n            tipo: 'success',\n            loading: false\n          }\n        };\n      }\n\n    case LOAD_METADADO_SELECTED_SUCCESS_EDITAVEIS:\n      {\n        const {\n          metadados,\n          tabela\n        } = payload;\n\n        if (tabela === MTT_METADADOTABELA) {\n          return { ...state,\n            camposTabelaEditaveis: metadados.campos\n          };\n        }\n\n        return { ...state,\n          editaveis: metadados.campos\n        };\n      }\n\n    case REMOVE_METADADO_SELECTED:\n      {\n        const {\n          metadadoId: metadadoIdToRemove\n        } = payload;\n        return { ...state,\n          dados: state.dados.filter(dado => dado[Object.keys(dado)[0]] !== metadadoIdToRemove)\n        };\n      }\n\n    case UPDATE_METADADO_SELECTED:\n      {\n        const {\n          id: idToUpdate,\n          campo: campoUpdated\n        } = payload;\n        return { ...state,\n          campos: state.campos.map(campo => {\n            if (campo[Object.keys(campo)[0]] === idToUpdate) {\n              Object.entries(campo).map(([keyCampo]) => {\n                Object.entries(campoUpdated).map(([keyCampoUpdate, valCampoUpdate]) => {\n                  if (keyCampo.split(' (')[1] === `${keyCampoUpdate})`) {\n                    campo[keyCampo] = valCampoUpdate;\n                  }\n                });\n              });\n            }\n\n            return campo;\n          }),\n          cabecalho: state.cabecalho.map(data => {\n            if (data[Object.keys(data)[0]] == idToUpdate) {\n              Object.entries(data).map(([keyCampo]) => {\n                Object.entries(campoUpdated).map(([keyCampoUpdate, valCampoUpdate]) => {\n                  if (keyCampo.split(' (')[1] === `${keyCampoUpdate})`) {\n                    data[keyCampo] = valCampoUpdate;\n                  }\n                });\n              });\n            }\n\n            return data;\n          })\n        };\n      }\n\n    case SET_METADADO_SELECTED_MESSAGE:\n      {\n        const {\n          message\n        } = payload;\n        return { ...state,\n          message\n        };\n      }\n\n    case LOAD_METADADO_SELECTED_IN_PROGRESS:\n      {\n        return { ...state,\n          isLoading: true\n        };\n      }\n\n    case LOAD_METADADO_SELECTED_FAILURE:\n      {\n        return { ...state,\n          isLoading: false\n        };\n      }\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["C:/Users/BENEDICTO EDUARDO/PycharmProjects/geo/src/store/reducers/metadados.js"],"names":["LOAD_METADADOS_FAILURE","LOAD_METADADOS_IN_PROGRESS","LOAD_METADADOS_SUCCESS","LOAD_METADADO_SELECTED_FAILURE","LOAD_METADADO_SELECTED_IN_PROGRESS","LOAD_METADADO_SELECTED_SUCCESS","LOAD_METADADO_SELECTED_SUCCESS_EDITAVEIS","REMOVE_METADADO_SELECTED","SET_METADADO_SELECTED_MESSAGE","UPDATE_METADADO_SELECTED","MTT_METADADOTABELA","initialState","isLoading","data","metadados","state","action","type","payload","initialStateSelected","cabecalho","campos","dados","editaveis","camposTabelaEditaveis","mttTabela","message","open","text","tipo","loading","metadadoSelected","tabela","metadadoId","metadadoIdToRemove","filter","dado","Object","keys","id","idToUpdate","campo","campoUpdated","map","entries","keyCampo","keyCampoUpdate","valCampoUpdate","split"],"mappings":"AAAA,SACEA,sBADF,EAEEC,0BAFF,EAGEC,sBAHF,EAIEC,8BAJF,EAKEC,kCALF,EAMEC,8BANF,EAOEC,wCAPF,EAQEC,wBARF,EASEC,6BATF,EAUEC,wBAVF,QAWO,sBAXP;AAaA,SAASC,kBAAT,QAAmC,0BAAnC;AAEA,MAAMC,YAAY,GAAG;AAAEC,EAAAA,SAAS,EAAE,KAAb;AAAoBC,EAAAA,IAAI,EAAE;AAA1B,CAArB;AACA,OAAO,MAAMC,SAAS,GAAG,CAACC,KAAK,GAAGJ,YAAT,EAAuBK,MAAvB,KAAkC;AACzD,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBF,MAA1B;;AACA,UAAQC,IAAR;AACE,SAAKf,sBAAL;AAA6B;AAC3B,cAAM;AAAEY,UAAAA;AAAF,YAAgBI,OAAtB;AACA,eAAO,EACL,GAAGH,KADE;AAELH,UAAAA,SAAS,EAAE,KAFN;AAGLC,UAAAA,IAAI,EAAEC;AAHD,SAAP;AAKD;;AAED,SAAKb,0BAAL;AAAiC;AAC/B,eAAO,EACL,GAAGc,KADE;AAELH,UAAAA,SAAS,EAAE;AAFN,SAAP;AAID;;AAED,SAAKZ,sBAAL;AAA6B;AAC3B,eAAO,EACL,GAAGe,KADE;AAELH,UAAAA,SAAS,EAAE;AAFN,SAAP;AAID;;AAED;AACE,aAAOG,KAAP;AAzBJ;AA2BD,CA7BM;AA+BP,MAAMI,oBAAoB,GAAG;AAC3BP,EAAAA,SAAS,EAAE,KADgB;AAE3BC,EAAAA,IAAI,EAAE,EAFqB;AAG3BO,EAAAA,SAAS,EAAE,EAHgB;AAI3BC,EAAAA,MAAM,EAAE,EAJmB;AAK3BC,EAAAA,KAAK,EAAE,EALoB;AAM3BC,EAAAA,SAAS,EAAE,EANgB;AAO3BC,EAAAA,qBAAqB,EAAE,EAPI;AAQ3BC,EAAAA,SAAS,EAAE,IARgB;AAS3BC,EAAAA,OAAO,EAAE;AACPC,IAAAA,IAAI,EAAE,KADC;AAEPC,IAAAA,IAAI,EAAE,IAFC;AAGPC,IAAAA,IAAI,EAAE,SAHC;AAIPC,IAAAA,OAAO,EAAE;AAJF;AATkB,CAA7B;AAgBA,OAAO,MAAMC,gBAAgB,GAAG,CAAChB,KAAK,GAAGI,oBAAT,EAA+BH,MAA/B,KAA0C;AACxE,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBF,MAA1B;;AACA,UAAQC,IAAR;AACE,SAAKZ,8BAAL;AAAqC;AACnC,cAAM;AAAEoB,UAAAA,SAAF;AAAaX,UAAAA;AAAb,YAA2BI,OAAjC;AACA,eAAO,EACL,GAAGH,KADE;AAELH,UAAAA,SAAS,EAAE,KAFN;AAGLC,UAAAA,IAAI,EAAEC,SAHD;AAILM,UAAAA,SAAS,EAAEN,SAAS,CAACM,SAJhB;AAKLC,UAAAA,MAAM,EAAEP,SAAS,CAACO,MALb;AAMLC,UAAAA,KAAK,EAAER,SAAS,CAACQ,KANZ;AAOLG,UAAAA,SAPK;AAQLC,UAAAA,OAAO,EAAE;AAAEC,YAAAA,IAAI,EAAE,KAAR;AAAeC,YAAAA,IAAI,EAAE,IAArB;AAA2BC,YAAAA,IAAI,EAAE,SAAjC;AAA4CC,YAAAA,OAAO,EAAE;AAArD;AARJ,SAAP;AAUD;;AAED,SAAKxB,wCAAL;AAA+C;AAC7C,cAAM;AAAEQ,UAAAA,SAAF;AAAakB,UAAAA;AAAb,YAAwBd,OAA9B;;AAEA,YAAIc,MAAM,KAAKtB,kBAAf,EAAmC;AACjC,iBAAO,EACL,GAAGK,KADE;AAELS,YAAAA,qBAAqB,EAAEV,SAAS,CAACO;AAF5B,WAAP;AAID;;AAED,eAAO,EACL,GAAGN,KADE;AAELQ,UAAAA,SAAS,EAAET,SAAS,CAACO;AAFhB,SAAP;AAID;;AAED,SAAKd,wBAAL;AAA+B;AAC7B,cAAM;AAAE0B,UAAAA,UAAU,EAAEC;AAAd,YAAqChB,OAA3C;AACA,eAAO,EACL,GAAGH,KADE;AAELO,UAAAA,KAAK,EAAEP,KAAK,CAACO,KAAN,CAAYa,MAAZ,CACJC,IAAD,IAAUA,IAAI,CAACC,MAAM,CAACC,IAAP,CAAYF,IAAZ,EAAkB,CAAlB,CAAD,CAAJ,KAA+BF,kBADpC;AAFF,SAAP;AAMD;;AAED,SAAKzB,wBAAL;AAA+B;AAC7B,cAAM;AAAE8B,UAAAA,EAAE,EAAEC,UAAN;AAAkBC,UAAAA,KAAK,EAAEC;AAAzB,YAA0CxB,OAAhD;AAEA,eAAO,EACL,GAAGH,KADE;AAELM,UAAAA,MAAM,EAAEN,KAAK,CAACM,MAAN,CAAasB,GAAb,CAAkBF,KAAD,IAAW;AAClC,gBAAIA,KAAK,CAACJ,MAAM,CAACC,IAAP,CAAYG,KAAZ,EAAmB,CAAnB,CAAD,CAAL,KAAiCD,UAArC,EAAiD;AAC/CH,cAAAA,MAAM,CAACO,OAAP,CAAeH,KAAf,EAAsBE,GAAtB,CAA0B,CAAC,CAACE,QAAD,CAAD,KAAgB;AACxCR,gBAAAA,MAAM,CAACO,OAAP,CAAeF,YAAf,EAA6BC,GAA7B,CACE,CAAC,CAACG,cAAD,EAAiBC,cAAjB,CAAD,KAAsC;AACpC,sBAAIF,QAAQ,CAACG,KAAT,CAAe,IAAf,EAAqB,CAArB,MAA6B,GAAEF,cAAe,GAAlD,EAAsD;AACpDL,oBAAAA,KAAK,CAACI,QAAD,CAAL,GAAkBE,cAAlB;AACD;AACF,iBALH;AAOD,eARD;AASD;;AACD,mBAAON,KAAP;AACD,WAbO,CAFH;AAgBLrB,UAAAA,SAAS,EAAEL,KAAK,CAACK,SAAN,CAAgBuB,GAAhB,CAAqB9B,IAAD,IAAU;AACvC,gBAAIA,IAAI,CAACwB,MAAM,CAACC,IAAP,CAAYzB,IAAZ,EAAkB,CAAlB,CAAD,CAAJ,IAA8B2B,UAAlC,EAA8C;AAC5CH,cAAAA,MAAM,CAACO,OAAP,CAAe/B,IAAf,EAAqB8B,GAArB,CAAyB,CAAC,CAACE,QAAD,CAAD,KAAgB;AACvCR,gBAAAA,MAAM,CAACO,OAAP,CAAeF,YAAf,EAA6BC,GAA7B,CACE,CAAC,CAACG,cAAD,EAAiBC,cAAjB,CAAD,KAAsC;AACpC,sBAAIF,QAAQ,CAACG,KAAT,CAAe,IAAf,EAAqB,CAArB,MAA6B,GAAEF,cAAe,GAAlD,EAAsD;AACpDjC,oBAAAA,IAAI,CAACgC,QAAD,CAAJ,GAAiBE,cAAjB;AACD;AACF,iBALH;AAOD,eARD;AASD;;AACD,mBAAOlC,IAAP;AACD,WAbU;AAhBN,SAAP;AA+BD;;AAED,SAAKL,6BAAL;AAAoC;AAClC,cAAM;AAAEkB,UAAAA;AAAF,YAAcR,OAApB;AACA,eAAO,EACL,GAAGH,KADE;AAELW,UAAAA;AAFK,SAAP;AAID;;AAED,SAAKtB,kCAAL;AAAyC;AACvC,eAAO,EACL,GAAGW,KADE;AAELH,UAAAA,SAAS,EAAE;AAFN,SAAP;AAID;;AAED,SAAKT,8BAAL;AAAqC;AACnC,eAAO,EACL,GAAGY,KADE;AAELH,UAAAA,SAAS,EAAE;AAFN,SAAP;AAID;;AAED;AACE,aAAOG,KAAP;AApGJ;AAsGD,CAxGM","sourcesContent":["import {\n  LOAD_METADADOS_FAILURE,\n  LOAD_METADADOS_IN_PROGRESS,\n  LOAD_METADADOS_SUCCESS,\n  LOAD_METADADO_SELECTED_FAILURE,\n  LOAD_METADADO_SELECTED_IN_PROGRESS,\n  LOAD_METADADO_SELECTED_SUCCESS,\n  LOAD_METADADO_SELECTED_SUCCESS_EDITAVEIS,\n  REMOVE_METADADO_SELECTED,\n  SET_METADADO_SELECTED_MESSAGE,\n  UPDATE_METADADO_SELECTED,\n} from '../actions/metadados'\n\nimport { MTT_METADADOTABELA } from '../../services/metadados'\n\nconst initialState = { isLoading: false, data: [] }\nexport const metadados = (state = initialState, action) => {\n  const { type, payload } = action\n  switch (type) {\n    case LOAD_METADADOS_SUCCESS: {\n      const { metadados } = payload\n      return {\n        ...state,\n        isLoading: false,\n        data: metadados,\n      }\n    }\n\n    case LOAD_METADADOS_IN_PROGRESS: {\n      return {\n        ...state,\n        isLoading: true,\n      }\n    }\n\n    case LOAD_METADADOS_FAILURE: {\n      return {\n        ...state,\n        isLoading: false,\n      }\n    }\n\n    default:\n      return state\n  }\n}\n\nconst initialStateSelected = {\n  isLoading: false,\n  data: [],\n  cabecalho: [],\n  campos: [],\n  dados: [],\n  editaveis: [],\n  camposTabelaEditaveis: [],\n  mttTabela: null,\n  message: {\n    open: false,\n    text: null,\n    tipo: 'success',\n    loading: false,\n  },\n}\nexport const metadadoSelected = (state = initialStateSelected, action) => {\n  const { type, payload } = action\n  switch (type) {\n    case LOAD_METADADO_SELECTED_SUCCESS: {\n      const { mttTabela, metadados } = payload\n      return {\n        ...state,\n        isLoading: false,\n        data: metadados,\n        cabecalho: metadados.cabecalho,\n        campos: metadados.campos,\n        dados: metadados.dados,\n        mttTabela,\n        message: { open: false, text: null, tipo: 'success', loading: false },\n      }\n    }\n\n    case LOAD_METADADO_SELECTED_SUCCESS_EDITAVEIS: {\n      const { metadados, tabela } = payload\n\n      if (tabela === MTT_METADADOTABELA) {\n        return {\n          ...state,\n          camposTabelaEditaveis: metadados.campos,\n        }\n      }\n\n      return {\n        ...state,\n        editaveis: metadados.campos,\n      }\n    }\n\n    case REMOVE_METADADO_SELECTED: {\n      const { metadadoId: metadadoIdToRemove } = payload\n      return {\n        ...state,\n        dados: state.dados.filter(\n          (dado) => dado[Object.keys(dado)[0]] !== metadadoIdToRemove\n        ),\n      }\n    }\n\n    case UPDATE_METADADO_SELECTED: {\n      const { id: idToUpdate, campo: campoUpdated } = payload\n\n      return {\n        ...state,\n        campos: state.campos.map((campo) => {\n          if (campo[Object.keys(campo)[0]] === idToUpdate) {\n            Object.entries(campo).map(([keyCampo]) => {\n              Object.entries(campoUpdated).map(\n                ([keyCampoUpdate, valCampoUpdate]) => {\n                  if (keyCampo.split(' (')[1] === `${keyCampoUpdate})`) {\n                    campo[keyCampo] = valCampoUpdate\n                  }\n                }\n              )\n            })\n          }\n          return campo\n        }),\n        cabecalho: state.cabecalho.map((data) => {\n          if (data[Object.keys(data)[0]] == idToUpdate) {\n            Object.entries(data).map(([keyCampo]) => {\n              Object.entries(campoUpdated).map(\n                ([keyCampoUpdate, valCampoUpdate]) => {\n                  if (keyCampo.split(' (')[1] === `${keyCampoUpdate})`) {\n                    data[keyCampo] = valCampoUpdate\n                  }\n                }\n              )\n            })\n          }\n          return data\n        }),\n      }\n    }\n\n    case SET_METADADO_SELECTED_MESSAGE: {\n      const { message } = payload\n      return {\n        ...state,\n        message,\n      }\n    }\n\n    case LOAD_METADADO_SELECTED_IN_PROGRESS: {\n      return {\n        ...state,\n        isLoading: true,\n      }\n    }\n\n    case LOAD_METADADO_SELECTED_FAILURE: {\n      return {\n        ...state,\n        isLoading: false,\n      }\n    }\n\n    default:\n      return state\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
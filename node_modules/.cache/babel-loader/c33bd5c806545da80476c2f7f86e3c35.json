{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\BENEDICTO EDUARDO\\\\PycharmProjects\\\\geo\\\\src\\\\pages\\\\ObjetosTabulares\\\\Atualizacao\\\\index.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Grid, CircularProgress } from '@material-ui/core';\nimport { connect } from 'react-redux';\nimport CustomDialog from '../../../components/Dialog';\nimport CustomTable from '../../../components/Table';\nimport Toast from '../../../components/Toast';\nimport { MTA_METADADOATRIBUTO, removeMetadado, updateMetadado } from '../../../services/metadados';\nimport * as Service from '../../../services/metadados.v2';\nimport { getAllMetadadoSelectedEditaveis } from '../../../store/selectors/metadados';\nimport Objetos from './Objetos';\nimport { Container, Header, Section } from './styles';\n\nfunction Atualizacao({\n  metadadoSelectedEditaveis,\n  onUpdatePressed,\n  onRemovePressed\n}) {\n  const [objeto, setObjeto] = useState({});\n  const [objetos, setObjetos] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [toast, setToast] = useState({\n    open: false,\n    text: '',\n    severity: 'error'\n  });\n  const [dialog, setDialog] = useState({\n    open: false,\n    message: '',\n    mensagem: '',\n    campos: [],\n    labelButton: '',\n    dialogTitle: ' ',\n    action: () => {}\n  });\n  useEffect(() => {\n    async function populateObjetos() {\n      const objetos = await Service.fetchObjetosTotal('convencional');\n      setObjetos(objetos.cabecalho);\n    }\n\n    populateObjetos();\n  }, []);\n\n  const handleChange = async event => {\n    setLoading(true);\n    const mtt_tabela = event.target.value;\n\n    try {\n      const objeto = await Service.fetchObjetoTabelaExtenso(mtt_tabela);\n      setObjeto({ ...objeto,\n        mtt_tabela\n      });\n    } catch (e) {\n      setToast({\n        open: true,\n        severity: 'error',\n        text: `Erro ao processar a requisição ${e}`\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  function onGeneratedData(elementsParse) {\n    let jsonData = {};\n    const tempData = [];\n\n    for (const [, value] of Object.entries(elementsParse)) {\n      if (JSON.stringify(value).includes('A - ')) jsonData = {};\n\n      for (const [keyValue, valueValue] of Object.entries(value)) {\n        jsonData[keyValue] = valueValue;\n        if (keyValue.includes('A - ')) tempData.push(jsonData);\n      }\n    }\n\n    return tempData;\n  }\n\n  const createPropertyObject = (currElement, entryPreference) => {\n    return Object.entries(currElement).map(([key, values]) => {\n      return entryPreference === 'key' ? {\n        titulo: `${key.split(' - ')[1]}`,\n        dado: `${key}`\n      } : {\n        [key]: `${values}`\n      };\n    });\n  };\n\n  const createKeyAndValueObjects = (metadadoMap = [], entryPreference) => {\n    let elementsKey = [];\n    let elementsParse = null;\n    const elements = metadadoMap.map(currElement => {\n      return elementsKey = createPropertyObject(currElement, entryPreference);\n    });\n\n    if (entryPreference !== 'key') {\n      const elementsStringify = JSON.stringify(elements).replaceAll('[[[{', '[{').replaceAll('}]]]', '}]').replaceAll('}]],[[{', '},{').replaceAll('[[{', '[{').replaceAll('}]]', '}]').replaceAll('}],[{', '},{');\n      elementsParse = JSON.parse(elementsStringify);\n      elementsParse = onGeneratedData(elementsParse);\n    } else {\n      elementsParse = elementsKey;\n    }\n\n    return elementsParse;\n  };\n\n  const dialogRemove = dado => {\n    setDialog({\n      open: true,\n      labelButton: 'Sim',\n      tipo: 'success',\n      dialogTitle: 'Excluir',\n      message: `Tem certeza que deseja excluir o dado [${dado[Object.keys(dado)[0]]} - ${dado[Object.keys(dado)[1]]}] da tabela ${objeto.mtt_tabela} permanentemente? `,\n\n      action() {\n        onRemovePressed(objeto.mtt_tabela, dado[Object.keys(dado)[0]]);\n        setToast({\n          open: true,\n          severity: 'success',\n          text: `Dado excluído com sucesso`\n        });\n      }\n\n    });\n  };\n\n  const dialogUpdate = (dado, fields) => {\n    setDialog({\n      open: true,\n      tipo: 'success',\n      labelButton: 'Atualizar',\n      dialogTitle: 'Atualizar atributo',\n      data: dado.length > 0 ? dado[0] : dado,\n      campos: fields,\n      editData: true,\n\n      action(id, dadoAlteracao) {\n        const dataToUpdate = { ...dadoAlteracao,\n          tabela: MTA_METADADOATRIBUTO,\n          mta_identificador: id\n        };\n        onUpdatePressed(id, dataToUpdate);\n      }\n\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Toast, {\n    open: toast.open,\n    handleClose: () => {\n      setToast({ ...toast,\n        open: false\n      });\n    },\n    severity: toast.severity,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }\n  }, toast.text), /*#__PURE__*/React.createElement(CustomDialog, {\n    open: dialog.open,\n    mensagem: dialog.mensagem,\n    campos: dialog.campos,\n    labelButton: dialog.labelButton,\n    dialogTitle: dialog.dialogTitle,\n    message: dialog.message,\n    action: dialog.action,\n    data: dialog.data,\n    editData: dialog.editData,\n    editaveis: metadadoSelectedEditaveis,\n    handleClose: () => {\n      setDialog({ ...dialog,\n        open: false\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    direction: \"column\",\n    spacing: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Section, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Header, {\n    style: {\n      marginTop: '-35px',\n      marginBottom: '10px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 15\n    }\n  }, \"Objetos\")), /*#__PURE__*/React.createElement(Objetos, {\n    data: objetos,\n    value: objeto,\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Header, {\n    style: {\n      marginTop: '-10px',\n      marginBottom: '10px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 15\n    }\n  }, \"Conte\\xFAdo do objeto\")), loading ? /*#__PURE__*/React.createElement(CircularProgress, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 15\n    }\n  }) : /*#__PURE__*/React.createElement(CustomTable, {\n    dados: createKeyAndValueObjects(objeto.dados, 'values'),\n    campos: createKeyAndValueObjects(objeto.dados, 'key'),\n    updateDados: dialogUpdate,\n    excluirDados: dialogRemove,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 15\n    }\n  })))));\n}\n\nconst mapStateToProps = state => ({\n  // isLoading: getMetadadosTotalLoading(state),\n  // metadados: getAllMetadadosTotal(state),\n  // isLoadingMetadadoSelected: getMetadadoSelectedLoading(state),\n  // metadadoSelectedCabecalho: getAllMetadadoSelectedCabecalho(state),\n  // metadadoSelectedCampos: getAllMetadadoSelectedCampos(state),\n  // metadadoSelectedDados: getAllMetadadoSelectedDados(state),\n  // metadadoSelectedTabela: getAllMetadadoSelectedTabela(state),\n  // metadadoSelectedMessage: getAllMetadadoSelectedMessage(state),\n  metadadoSelectedEditaveis: getAllMetadadoSelectedEditaveis(state)\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onRemovePressed: (mttTababela, id) => dispatch(removeMetadado(mttTababela, id)),\n  onUpdatePressed: (id, json) => dispatch(updateMetadado(id, json)) // onSetMessagePressed: (message) => dispatch(setMessage(message)),\n  // startLoadingMetadados: () => dispatch(loadMetadadosTotal()),\n\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Atualizacao);","map":{"version":3,"sources":["C:/Users/BENEDICTO EDUARDO/PycharmProjects/geo/src/pages/ObjetosTabulares/Atualizacao/index.js"],"names":["React","useState","useEffect","Grid","CircularProgress","connect","CustomDialog","CustomTable","Toast","MTA_METADADOATRIBUTO","removeMetadado","updateMetadado","Service","getAllMetadadoSelectedEditaveis","Objetos","Container","Header","Section","Atualizacao","metadadoSelectedEditaveis","onUpdatePressed","onRemovePressed","objeto","setObjeto","objetos","setObjetos","loading","setLoading","toast","setToast","open","text","severity","dialog","setDialog","message","mensagem","campos","labelButton","dialogTitle","action","populateObjetos","fetchObjetosTotal","cabecalho","handleChange","event","mtt_tabela","target","value","fetchObjetoTabelaExtenso","e","onGeneratedData","elementsParse","jsonData","tempData","Object","entries","JSON","stringify","includes","keyValue","valueValue","push","createPropertyObject","currElement","entryPreference","map","key","values","titulo","split","dado","createKeyAndValueObjects","metadadoMap","elementsKey","elements","elementsStringify","replaceAll","parse","dialogRemove","tipo","keys","dialogUpdate","fields","data","length","editData","id","dadoAlteracao","dataToUpdate","tabela","mta_identificador","marginTop","marginBottom","dados","mapStateToProps","state","mapDispatchToProps","dispatch","mttTababela","json"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\n\nimport { Grid, CircularProgress } from '@material-ui/core'\nimport { connect } from 'react-redux'\n\nimport CustomDialog from '../../../components/Dialog'\nimport CustomTable from '../../../components/Table'\nimport Toast from '../../../components/Toast'\nimport {\n  MTA_METADADOATRIBUTO,\n  removeMetadado,\n  updateMetadado,\n} from '../../../services/metadados'\nimport * as Service from '../../../services/metadados.v2'\nimport { getAllMetadadoSelectedEditaveis } from '../../../store/selectors/metadados'\nimport Objetos from './Objetos'\nimport { Container, Header, Section } from './styles'\n\nfunction Atualizacao({\n  metadadoSelectedEditaveis,\n  onUpdatePressed,\n  onRemovePressed,\n}) {\n  const [objeto, setObjeto] = useState({})\n  const [objetos, setObjetos] = useState([])\n  const [loading, setLoading] = useState(false)\n  const [toast, setToast] = useState({\n    open: false,\n    text: '',\n    severity: 'error',\n  })\n  const [dialog, setDialog] = useState({\n    open: false,\n    message: '',\n    mensagem: '',\n    campos: [],\n    labelButton: '',\n    dialogTitle: ' ',\n    action: () => {},\n  })\n\n  useEffect(() => {\n    async function populateObjetos() {\n      const objetos = await Service.fetchObjetosTotal('convencional')\n      setObjetos(objetos.cabecalho)\n    }\n    populateObjetos()\n  }, [])\n\n  const handleChange = async (event) => {\n    setLoading(true)\n    const mtt_tabela = event.target.value\n\n    try {\n      const objeto = await Service.fetchObjetoTabelaExtenso(mtt_tabela)\n      setObjeto({ ...objeto, mtt_tabela })\n    } catch (e) {\n      setToast({\n        open: true,\n        severity: 'error',\n        text: `Erro ao processar a requisição ${e}`,\n      })\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  function onGeneratedData(elementsParse) {\n    let jsonData = {}\n    const tempData = []\n    for (const [, value] of Object.entries(elementsParse)) {\n      if (JSON.stringify(value).includes('A - ')) jsonData = {}\n      for (const [keyValue, valueValue] of Object.entries(value)) {\n        jsonData[keyValue] = valueValue\n        if (keyValue.includes('A - ')) tempData.push(jsonData)\n      }\n    }\n    return tempData\n  }\n\n  const createPropertyObject = (currElement, entryPreference) => {\n    return Object.entries(currElement).map(([key, values]) => {\n      return entryPreference === 'key'\n        ? {\n            titulo: `${key.split(' - ')[1]}`,\n            dado: `${key}`,\n          }\n        : {\n            [key]: `${values}`,\n          }\n    })\n  }\n\n  const createKeyAndValueObjects = (metadadoMap = [], entryPreference) => {\n    let elementsKey = []\n    let elementsParse = null\n    const elements = metadadoMap.map((currElement) => {\n      return (elementsKey = createPropertyObject(currElement, entryPreference))\n    })\n\n    if (entryPreference !== 'key') {\n      const elementsStringify = JSON.stringify(elements)\n        .replaceAll('[[[{', '[{')\n        .replaceAll('}]]]', '}]')\n        .replaceAll('}]],[[{', '},{')\n        .replaceAll('[[{', '[{')\n        .replaceAll('}]]', '}]')\n        .replaceAll('}],[{', '},{')\n      elementsParse = JSON.parse(elementsStringify)\n      elementsParse = onGeneratedData(elementsParse)\n    } else {\n      elementsParse = elementsKey\n    }\n\n    return elementsParse\n  }\n\n  const dialogRemove = (dado) => {\n    setDialog({\n      open: true,\n      labelButton: 'Sim',\n      tipo: 'success',\n      dialogTitle: 'Excluir',\n      message: `Tem certeza que deseja excluir o dado [${\n        dado[Object.keys(dado)[0]]\n      } - ${dado[Object.keys(dado)[1]]}] da tabela ${\n        objeto.mtt_tabela\n      } permanentemente? `,\n      action() {\n        onRemovePressed(objeto.mtt_tabela, dado[Object.keys(dado)[0]])\n        setToast({\n          open: true,\n          severity: 'success',\n          text: `Dado excluído com sucesso`,\n        })\n      },\n    })\n  }\n\n  const dialogUpdate = (dado, fields) => {\n    setDialog({\n      open: true,\n      tipo: 'success',\n      labelButton: 'Atualizar',\n      dialogTitle: 'Atualizar atributo',\n      data: dado.length > 0 ? dado[0] : dado,\n      campos: fields,\n      editData: true,\n      action(id, dadoAlteracao) {\n        const dataToUpdate = {\n          ...dadoAlteracao,\n          tabela: MTA_METADADOATRIBUTO,\n          mta_identificador: id,\n        }\n        onUpdatePressed(id, dataToUpdate)\n      },\n    })\n  }\n\n  return (\n    <Container>\n      <Toast\n        open={toast.open}\n        handleClose={() => {\n          setToast({ ...toast, open: false })\n        }}\n        severity={toast.severity}\n      >\n        {toast.text}\n      </Toast>\n      <CustomDialog\n        open={dialog.open}\n        mensagem={dialog.mensagem}\n        campos={dialog.campos}\n        labelButton={dialog.labelButton}\n        dialogTitle={dialog.dialogTitle}\n        message={dialog.message}\n        action={dialog.action}\n        data={dialog.data}\n        editData={dialog.editData}\n        editaveis={metadadoSelectedEditaveis}\n        handleClose={() => {\n          setDialog({ ...dialog, open: false })\n        }}\n      />\n      <Grid container direction='column' spacing={2}>\n        <Grid item xs={6}>\n          <Section>\n            <Header style={{ marginTop: '-35px', marginBottom: '10px' }}>\n              <h3>Objetos</h3>\n            </Header>\n            <Objetos data={objetos} value={objeto} onChange={handleChange} />\n            <Header style={{ marginTop: '-10px', marginBottom: '10px' }}>\n              <h3>Conteúdo do objeto</h3>\n            </Header>\n            {loading ? (\n              <CircularProgress />\n            ) : (\n              <CustomTable\n                dados={createKeyAndValueObjects(objeto.dados, 'values')}\n                campos={createKeyAndValueObjects(objeto.dados, 'key')}\n                updateDados={dialogUpdate}\n                excluirDados={dialogRemove}\n              />\n            )}\n          </Section>\n        </Grid>\n      </Grid>\n    </Container>\n  )\n}\n\nconst mapStateToProps = (state) => ({\n  // isLoading: getMetadadosTotalLoading(state),\n  // metadados: getAllMetadadosTotal(state),\n  // isLoadingMetadadoSelected: getMetadadoSelectedLoading(state),\n  // metadadoSelectedCabecalho: getAllMetadadoSelectedCabecalho(state),\n  // metadadoSelectedCampos: getAllMetadadoSelectedCampos(state),\n  // metadadoSelectedDados: getAllMetadadoSelectedDados(state),\n  // metadadoSelectedTabela: getAllMetadadoSelectedTabela(state),\n  // metadadoSelectedMessage: getAllMetadadoSelectedMessage(state),\n  metadadoSelectedEditaveis: getAllMetadadoSelectedEditaveis(state),\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n  onRemovePressed: (mttTababela, id) =>\n    dispatch(removeMetadado(mttTababela, id)),\n  onUpdatePressed: (id, json) => dispatch(updateMetadado(id, json)),\n  // onSetMessagePressed: (message) => dispatch(setMessage(message)),\n  // startLoadingMetadados: () => dispatch(loadMetadadosTotal()),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Atualizacao)\n"]},"metadata":{},"sourceType":"module"}
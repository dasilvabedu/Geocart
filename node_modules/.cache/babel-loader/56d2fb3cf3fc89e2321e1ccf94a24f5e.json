{"ast":null,"code":"import _defineProperty from\"C:\\\\Users\\\\BENEDICTO EDUARDO\\\\PycharmProjects\\\\geo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";import _objectSpread from\"C:\\\\Users\\\\BENEDICTO EDUARDO\\\\PycharmProjects\\\\geo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"C:\\\\Users\\\\BENEDICTO EDUARDO\\\\PycharmProjects\\\\geo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';import{NativeSelect}from'@material-ui/core';import{connect}from'react-redux';import{loadMetadadosTotal,loadDadoPorExtenso}from'../../services/metadados';import{getAllMetadadosTotal,getAllMetadadoSelectedTabela}from'../../store/selectors/metadados';function Objetos(_ref){var metadados=_ref.metadados,startLoadingMetadados=_ref.startLoadingMetadados,metadadoSelectedTabela=_ref.metadadoSelectedTabela,onTabelaSelected=_ref.onTabelaSelected;useEffect(function(){startLoadingMetadados();},[startLoadingMetadados]);var tabelaSelecionada=metadados.find(function(metadado){return metadado.mtt_tabela===metadadoSelectedTabela;});var _useState=useState({name:tabelaSelecionada?tabelaSelecionada.mtt_tabela:'',mtt_descricao:tabelaSelecionada?tabelaSelecionada.mtt_descricao:'',mtt_tabela:tabelaSelecionada?tabelaSelecionada.mtt_tabela:''}),_useState2=_slicedToArray(_useState,2),state=_useState2[0],setState=_useState2[1];var metadadosSorted=metadados.slice(0);metadadosSorted.sort(function(a,b){var x=a.mtt_tabela.toLowerCase();var y=b.mtt_tabela.toLowerCase();return x<y?-1:x>y?1:0;});var handleChange=function handleChange(event){var _objectSpread2;var _event$target=event.target,name=_event$target.name,value=_event$target.value;onTabelaSelected(value);setState(_objectSpread(_objectSpread({},state),{},(_objectSpread2={},_defineProperty(_objectSpread2,name,value),_defineProperty(_objectSpread2,\"mtt_tabela\",value),_objectSpread2)));};return/*#__PURE__*/React.createElement(NativeSelect,{value:state.mtt_descricao,onChange:handleChange,inputProps:{name:'mtt_descricao',id:'mtt_tabela'}},state.mtt_tabela?/*#__PURE__*/React.createElement(\"option\",{value:state.mtt_tabela},state.mtt_descricao,\" (\",state.mtt_tabela,\")\"):/*#__PURE__*/React.createElement(\"option\",{value:\"\"},\"Selecione\"),metadadosSorted.map(function(metadado,index){return/*#__PURE__*/React.createElement(\"option\",{value:metadado.mtt_tabela,key:index},metadado.mtt_descricao,\" (\",metadado.mtt_tabela,\")\");}));}var mapStateToProps=function mapStateToProps(state){return{metadados:getAllMetadadosTotal(state),metadadoSelectedTabela:getAllMetadadoSelectedTabela(state)};};var mapDispatchToProps=function mapDispatchToProps(dispatch){return{onTabelaSelected:function onTabelaSelected(mttTababela){return dispatch(loadDadoPorExtenso(mttTababela));},startLoadingMetadados:function startLoadingMetadados(){return dispatch(loadMetadadosTotal());}};};export default connect(mapStateToProps,mapDispatchToProps)(Objetos);","map":{"version":3,"sources":["C:/Users/BENEDICTO EDUARDO/PycharmProjects/geo/src/components/Objetos/index.js"],"names":["React","useState","useEffect","NativeSelect","connect","loadMetadadosTotal","loadDadoPorExtenso","getAllMetadadosTotal","getAllMetadadoSelectedTabela","Objetos","metadados","startLoadingMetadados","metadadoSelectedTabela","onTabelaSelected","tabelaSelecionada","find","metadado","mtt_tabela","name","mtt_descricao","state","setState","metadadosSorted","slice","sort","a","b","x","toLowerCase","y","handleChange","event","target","value","id","map","index","mapStateToProps","mapDispatchToProps","dispatch","mttTababela"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\n\nimport { NativeSelect } from '@material-ui/core'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\n\nimport {\n  loadMetadadosTotal,\n  loadDadoPorExtenso,\n} from '../../services/metadados'\nimport {\n  getAllMetadadosTotal,\n  getAllMetadadoSelectedTabela,\n} from '../../store/selectors/metadados'\n\nfunction Objetos({\n  metadados,\n  startLoadingMetadados,\n  metadadoSelectedTabela,\n  onTabelaSelected,\n}) {\n  useEffect(() => {\n    startLoadingMetadados()\n  }, [startLoadingMetadados])\n\n  const tabelaSelecionada = metadados.find((metadado) => {\n    return metadado.mtt_tabela === metadadoSelectedTabela\n  })\n\n  const [state, setState] = useState({\n    name: tabelaSelecionada ? tabelaSelecionada.mtt_tabela : '',\n    mtt_descricao: tabelaSelecionada ? tabelaSelecionada.mtt_descricao : '',\n    mtt_tabela: tabelaSelecionada ? tabelaSelecionada.mtt_tabela : '',\n  })\n\n  const metadadosSorted = metadados.slice(0)\n  metadadosSorted.sort(function (a, b) {\n    const x = a.mtt_tabela.toLowerCase()\n    const y = b.mtt_tabela.toLowerCase()\n    return x < y ? -1 : x > y ? 1 : 0\n  })\n\n  const handleChange = (event) => {\n    const { name, value } = event.target\n    onTabelaSelected(value)\n    setState({\n      ...state,\n      [name]: value,\n      mtt_tabela: value,\n    })\n  }\n\n  return (\n    <NativeSelect\n      value={state.mtt_descricao}\n      onChange={handleChange}\n      inputProps={{\n        name: 'mtt_descricao',\n        id: 'mtt_tabela',\n      }}\n    >\n      {state.mtt_tabela ? (\n        <option value={state.mtt_tabela}>\n          {state.mtt_descricao} ({state.mtt_tabela})\n        </option>\n      ) : (\n        <option value=''>Selecione</option>\n      )}\n\n      {metadadosSorted.map((metadado, index) => (\n        <option value={metadado.mtt_tabela} key={index}>\n          {metadado.mtt_descricao} ({metadado.mtt_tabela})\n        </option>\n      ))}\n    </NativeSelect>\n  )\n}\n\nconst mapStateToProps = (state) => ({\n  metadados: getAllMetadadosTotal(state),\n  metadadoSelectedTabela: getAllMetadadoSelectedTabela(state),\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n  onTabelaSelected: (mttTababela) => dispatch(loadDadoPorExtenso(mttTababela)),\n  startLoadingMetadados: () => dispatch(loadMetadadosTotal()),\n})\n\nObjetos.propTypes = {\n  metadados: PropTypes.array,\n  onTabelaSelected: PropTypes.func.isRequired,\n  startLoadingMetadados: PropTypes.func.isRequired,\n  metadadoSelectedTabela: PropTypes.string,\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Objetos)\n"]},"metadata":{},"sourceType":"module"}
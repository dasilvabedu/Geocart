{"ast":null,"code":"import { loadMetadadosInProgress, loadMetadadosSuccess, loadMetadadosFailure, loadMetadadoSelectedInProgress, loadMetadadoSelectedSuccess, loadMetadadoSelectedSuccessEditaveis, loadMetadadoSelectedFailure, removeMetadadoSelected, updateMetadadoSelected, setMetadadoSelectedMessage } from '../store/actions/metadados';\nconst urlBase = 'http://moduloespacializacao.herokuapp.com/seguranca_barragem';\nexport const MTT_METADADOTABELA = 'mtt_metadadotabela';\nexport const MTA_METADADOATRIBUTO = 'mta_metadadoatributo';\nexport const loadMetadados = () => async dispatch => {\n  try {\n    dispatch(loadMetadadosInProgress());\n    const response = await fetch('http://localhost:8080/seguranca_barragem/metadado/simple');\n    const metadados = await response.json();\n    if (metadados.aresposta.codigo === 200) dispatch(loadMetadadosSuccess(metadados.cabecalho));else throw new Error(metadados.aresposta.mensagem);\n  } catch (e) {\n    dispatch(loadMetadadosFailure());\n    dispatch(setMetadadoSelectedMessage({\n      open: true,\n      text: `Erro ao processar a requisição ${e}`,\n      tipo: 'error',\n      loading: false\n    }));\n  }\n};\nexport const loadMetadadosTotal = () => async dispatch => {\n  const loadMetadadosTotalUrl = '/metadado/total?campos=mtt_tabela,mtt_descricao';\n\n  try {\n    dispatch(loadMetadadosInProgress());\n    const response = await fetch(`${urlBase}${loadMetadadosTotalUrl}`);\n    const metadados = await response.json();\n    if (metadados.aresposta.codigo === 200) dispatch(loadMetadadosSuccess(metadados.cabecalho));else throw new Error(metadados.aresposta.mensagem);\n    dispatch(loadDadoParaValidacao(MTA_METADADOATRIBUTO));\n    dispatch(loadDadoParaValidacao(MTT_METADADOTABELA));\n  } catch (e) {\n    dispatch(loadMetadadosFailure());\n    dispatch(setMetadadoSelectedMessage({\n      open: true,\n      text: `Erro ao processar a requisição ${e}`,\n      tipo: 'error',\n      loading: false\n    }));\n  }\n};\nexport const loadDadoPorExtenso = mttTabela => async dispatch => {\n  const onTabelaSelectedUrl = `/dado/extenso?mtt_tabela=${mttTabela}&limite=5`;\n\n  try {\n    dispatch(loadMetadadoSelectedInProgress());\n    const response = await fetch(`${urlBase}${onTabelaSelectedUrl}`);\n    const metadados = await response.json();\n    if (metadados.aresposta.codigo === 200) dispatch(loadMetadadoSelectedSuccess(mttTabela, metadados));else throw new Error(metadados.aresposta.mensagem);\n  } catch (e) {\n    dispatch(loadMetadadoSelectedFailure());\n    dispatch(setMetadadoSelectedMessage({\n      open: true,\n      text: `Erro ao processar a requisição ${e}`,\n      tipo: 'error',\n      loading: false\n    }));\n  }\n};\nexport const loadDadoParaValidacao = mttTabela => async dispatch => {\n  const onTabelaSelectedUrl = `/dado/extenso?mtt_tabela=${mttTabela}`;\n\n  try {\n    const response = await fetch(urlBase + onTabelaSelectedUrl);\n    const metadados = await response.json();\n    dispatch(loadMetadadoSelectedSuccessEditaveis(metadados, mttTabela));\n  } catch (e) {\n    dispatch(loadMetadadoSelectedFailure());\n    dispatch(setMetadadoSelectedMessage({\n      open: true,\n      text: `Erro ao processar a requisição ${e}`,\n      tipo: 'error',\n      loading: false\n    }));\n  }\n};\nexport const removeMetadado = (mttTabela, id) => async dispatch => {\n  const removeMetadadoUrl = `/dado/excluido?mtt_tabela=${mttTabela}&identificador=${id}`;\n\n  try {\n    const response = await fetch(`${urlBase}${removeMetadadoUrl}`, {\n      method: 'GET' // OR DELETE\n\n    });\n    const removedMetadado = await response.json();\n    dispatch(removeMetadadoSelected(removedMetadado.excluido));\n    dispatch(setMetadadoSelectedMessage({\n      open: true,\n      text: removedMetadado.aresposta.mensagem,\n      loading: false,\n      tipo: removedMetadado.aresposta.codigo === 200 ? 'success' : 'error'\n    }));\n  } catch (e) {\n    dispatch(setMetadadoSelectedMessage({\n      open: true,\n      text: `Erro ao processar a exclusão ${e}`,\n      tipo: 'error',\n      loading: false\n    }));\n  }\n};\nexport const updateMetadado = (id, json) => async dispatch => {\n  const updateMetadadoUrl = `/dado/convencional/atualizado`;\n\n  try {\n    const body = JSON.stringify(json);\n    const response = await fetch(`${urlBase}${updateMetadadoUrl}`, {\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      method: 'POST',\n      body\n    });\n    const updatedMetadado = await response.json();\n    dispatch(updateMetadadoSelected(id, json));\n    dispatch(setMetadadoSelectedMessage({\n      open: true,\n      text: updatedMetadado.aresposta.mensagem,\n      loading: false,\n      tipo: updatedMetadado.aresposta.codigo === 200 ? 'success' : 'error'\n    }));\n  } catch (e) {\n    dispatch(setMetadadoSelectedMessage({\n      open: true,\n      text: `Erro ao processar a atualizacão ${e}`,\n      tipo: 'error',\n      loading: false\n    }));\n  }\n};\nexport const setMessage = message => async dispatch => {\n  dispatch(setMetadadoSelectedMessage(message));\n};\nexport const displayAlert = text => () => {\n  alert(`Error ${text}`);\n};\nexport const validarMetadado = () => async () => {\n  const response = await fetch(urlBase + `/metadado/validado`);\n  return await response.json();\n};","map":{"version":3,"sources":["C:/Users/BENEDICTO EDUARDO/PycharmProjects/geo/src/services/metadados.js"],"names":["loadMetadadosInProgress","loadMetadadosSuccess","loadMetadadosFailure","loadMetadadoSelectedInProgress","loadMetadadoSelectedSuccess","loadMetadadoSelectedSuccessEditaveis","loadMetadadoSelectedFailure","removeMetadadoSelected","updateMetadadoSelected","setMetadadoSelectedMessage","urlBase","MTT_METADADOTABELA","MTA_METADADOATRIBUTO","loadMetadados","dispatch","response","fetch","metadados","json","aresposta","codigo","cabecalho","Error","mensagem","e","open","text","tipo","loading","loadMetadadosTotal","loadMetadadosTotalUrl","loadDadoParaValidacao","loadDadoPorExtenso","mttTabela","onTabelaSelectedUrl","removeMetadado","id","removeMetadadoUrl","method","removedMetadado","excluido","updateMetadado","updateMetadadoUrl","body","JSON","stringify","headers","updatedMetadado","setMessage","message","displayAlert","alert","validarMetadado"],"mappings":"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","sourcesContent":["import {\n  loadMetadadosInProgress,\n  loadMetadadosSuccess,\n  loadMetadadosFailure,\n  loadMetadadoSelectedInProgress,\n  loadMetadadoSelectedSuccess,\n  loadMetadadoSelectedSuccessEditaveis,\n  loadMetadadoSelectedFailure,\n  removeMetadadoSelected,\n  updateMetadadoSelected,\n  setMetadadoSelectedMessage,\n} from '../store/actions/metadados'\n\nconst urlBase = 'http://moduloespacializacao.herokuapp.com/seguranca_barragem'\n\nexport const MTT_METADADOTABELA = 'mtt_metadadotabela'\n\nexport const MTA_METADADOATRIBUTO = 'mta_metadadoatributo'\n\nexport const loadMetadados = () => async (dispatch) => {\n  try {\n    dispatch(loadMetadadosInProgress())\n    const response = await fetch(\n      'http://localhost:8080/seguranca_barragem/metadado/simple'\n    )\n    const metadados = await response.json()\n\n    if (metadados.aresposta.codigo === 200)\n      dispatch(loadMetadadosSuccess(metadados.cabecalho))\n    else throw new Error(metadados.aresposta.mensagem)\n  } catch (e) {\n    dispatch(loadMetadadosFailure())\n    dispatch(\n      setMetadadoSelectedMessage({\n        open: true,\n        text: `Erro ao processar a requisição ${e}`,\n        tipo: 'error',\n        loading: false,\n      })\n    )\n  }\n}\n\nexport const loadMetadadosTotal = () => async (dispatch) => {\n  const loadMetadadosTotalUrl =\n    '/metadado/total?campos=mtt_tabela,mtt_descricao'\n\n  try {\n    dispatch(loadMetadadosInProgress())\n    const response = await fetch(`${urlBase}${loadMetadadosTotalUrl}`)\n    const metadados = await response.json()\n\n    if (metadados.aresposta.codigo === 200)\n      dispatch(loadMetadadosSuccess(metadados.cabecalho))\n    else throw new Error(metadados.aresposta.mensagem)\n\n    dispatch(loadDadoParaValidacao(MTA_METADADOATRIBUTO))\n    dispatch(loadDadoParaValidacao(MTT_METADADOTABELA))\n  } catch (e) {\n    dispatch(loadMetadadosFailure())\n    dispatch(\n      setMetadadoSelectedMessage({\n        open: true,\n        text: `Erro ao processar a requisição ${e}`,\n        tipo: 'error',\n        loading: false,\n      })\n    )\n  }\n}\n\nexport const loadDadoPorExtenso = (mttTabela) => async (dispatch) => {\n  const onTabelaSelectedUrl = `/dado/extenso?mtt_tabela=${mttTabela}&limite=5`\n\n  try {\n    dispatch(loadMetadadoSelectedInProgress())\n    const response = await fetch(`${urlBase}${onTabelaSelectedUrl}`)\n    const metadados = await response.json()\n\n    if (metadados.aresposta.codigo === 200)\n      dispatch(loadMetadadoSelectedSuccess(mttTabela, metadados))\n    else throw new Error(metadados.aresposta.mensagem)\n  } catch (e) {\n    dispatch(loadMetadadoSelectedFailure())\n    dispatch(\n      setMetadadoSelectedMessage({\n        open: true,\n        text: `Erro ao processar a requisição ${e}`,\n        tipo: 'error',\n        loading: false,\n      })\n    )\n  }\n}\n\nexport const loadDadoParaValidacao = (mttTabela) => async (dispatch) => {\n  const onTabelaSelectedUrl = `/dado/extenso?mtt_tabela=${mttTabela}`\n\n  try {\n    const response = await fetch(urlBase + onTabelaSelectedUrl)\n    const metadados = await response.json()\n\n    dispatch(loadMetadadoSelectedSuccessEditaveis(metadados, mttTabela))\n  } catch (e) {\n    dispatch(loadMetadadoSelectedFailure())\n    dispatch(\n      setMetadadoSelectedMessage({\n        open: true,\n        text: `Erro ao processar a requisição ${e}`,\n        tipo: 'error',\n        loading: false,\n      })\n    )\n  }\n}\n\nexport const removeMetadado = (mttTabela, id) => async (dispatch) => {\n  const removeMetadadoUrl = `/dado/excluido?mtt_tabela=${mttTabela}&identificador=${id}`\n  try {\n    const response = await fetch(`${urlBase}${removeMetadadoUrl}`, {\n      method: 'GET', // OR DELETE\n    })\n    const removedMetadado = await response.json()\n    dispatch(removeMetadadoSelected(removedMetadado.excluido))\n    dispatch(\n      setMetadadoSelectedMessage({\n        open: true,\n        text: removedMetadado.aresposta.mensagem,\n        loading: false,\n        tipo: removedMetadado.aresposta.codigo === 200 ? 'success' : 'error',\n      })\n    )\n  } catch (e) {\n    dispatch(\n      setMetadadoSelectedMessage({\n        open: true,\n        text: `Erro ao processar a exclusão ${e}`,\n        tipo: 'error',\n        loading: false,\n      })\n    )\n  }\n}\n\nexport const updateMetadado = (id, json) => async (dispatch) => {\n  const updateMetadadoUrl = `/dado/convencional/atualizado`\n  try {\n    const body = JSON.stringify(json)\n    const response = await fetch(`${urlBase}${updateMetadadoUrl}`, {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      method: 'POST',\n      body,\n    })\n    const updatedMetadado = await response.json()\n    dispatch(updateMetadadoSelected(id, json))\n    dispatch(\n      setMetadadoSelectedMessage({\n        open: true,\n        text: updatedMetadado.aresposta.mensagem,\n        loading: false,\n        tipo: updatedMetadado.aresposta.codigo === 200 ? 'success' : 'error',\n      })\n    )\n  } catch (e) {\n    dispatch(\n      setMetadadoSelectedMessage({\n        open: true,\n        text: `Erro ao processar a atualizacão ${e}`,\n        tipo: 'error',\n        loading: false,\n      })\n    )\n  }\n}\n\nexport const setMessage = (message) => async (dispatch) => {\n  dispatch(setMetadadoSelectedMessage(message))\n}\n\nexport const displayAlert = (text) => () => {\n  alert(`Error ${text}`)\n}\n\nexport const validarMetadado = () => async () => {\n  const response = await fetch(urlBase + `/metadado/validado`)\n  return await response.json()\n}\n"]},"metadata":{},"sourceType":"module"}